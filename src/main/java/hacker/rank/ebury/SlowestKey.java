/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hacker.rank.ebury;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

// Find the slowest pressed key in the ordered list

public class SlowestKey {

    public static char slowestKey(List<List<Integer>> keyTimes) {
        int result = 0;
        int minDifference = 0;

        for (int i = 0; i < keyTimes.size() - 1; i++) {
            // Compare the next time with the current one
            int actualKeyTime = keyTimes.get(i).get(1);
            int nextKeyTime = keyTimes.get(i + 1).get(1);
            int currentDifferent = nextKeyTime - actualKeyTime;

            // If it is less than the global minimum, update the result
            if (currentDifferent > minDifference) {
                minDifference = currentDifferent;
                result = keyTimes.get(i + 1).get(0);
            }
        }

        // Check with the very first case, test case 2 :(
        int firstTime = keyTimes.get(0).get(1);
        if (minDifference <= firstTime) {
            result = keyTimes.get(0).get(0);
        }

        // Just add the result on top of 'a' to get the correct ASCII code
        return ((char)(result + 'a'));
    }

    public static void main(String[] args) {
        System.out.println(slowestKey(Arrays.asList(Arrays.asList(0, 2), Arrays.asList(1, 3),  Arrays.asList(0, 7)))); // a

        System.out.println(slowestKey(Arrays.asList(
                Arrays.asList(0, 2),
                Arrays.asList(0, 3),
                Arrays.asList(4, 5),
                Arrays.asList(5, 6),
                Arrays.asList(4, 10)
        ))); // e

        System.out.println(slowestKey(Arrays.asList(
                Arrays.asList(0, 3),
                Arrays.asList(20 ,5),
                Arrays.asList(2 ,6),
                Arrays.asList(15 ,7),
                Arrays.asList(9 ,8),
                Arrays.asList(19, 9),
                Arrays.asList(24, 10),
                Arrays.asList(4, 12),
                Arrays.asList(3,13)
        ))); // a

        System.out.println(slowestKey(Arrays.asList(
                Arrays.asList(24,10),
                Arrays.asList(19,41),
                Arrays.asList(21,55),
                Arrays.asList(22,70),
                Arrays.asList(3,88),
                Arrays.asList(15,107),
                Arrays.asList(22,133),
                Arrays.asList(16,157),
                Arrays.asList(25,170),
                Arrays.asList(22,198),
                Arrays.asList(11,209),
                Arrays.asList(22,225),
                Arrays.asList(8,235),
                Arrays.asList(16,252),
                Arrays.asList(25,270),
                Arrays.asList(10,287),
                Arrays.asList(8,300),
                Arrays.asList(22,318),
                Arrays.asList(20,347),
                Arrays.asList(12,372),
                Arrays.asList(15,382),
                Arrays.asList(0,401),
                Arrays.asList(15,419),
                Arrays.asList(13,433),
                Arrays.asList(20,456),
                Arrays.asList(13,472),
                Arrays.asList(1,484),
                Arrays.asList(14,510),
                Arrays.asList(8,522),
                Arrays.asList(11,539),
                Arrays.asList(6,558),
                Arrays.asList(15,584),
                Arrays.asList(1,609),
                Arrays.asList(18,629),
                Arrays.asList(6,642),
                Arrays.asList(15,661),
                Arrays.asList(22,684),
                Arrays.asList(23,698),
                Arrays.asList(14,710),
                Arrays.asList(20,730),
                Arrays.asList(17,747),
                Arrays.asList(0,774),
                Arrays.asList(25,791),
                Arrays.asList(23,810),
                Arrays.asList(14,826),
                Arrays.asList(24,854),
                Arrays.asList(18,872),
                Arrays.asList(17,884),
                Arrays.asList(11,906),
                Arrays.asList(3,931),
                Arrays.asList(13,950),
                Arrays.asList(2,962),
                Arrays.asList(14,981),
                Arrays.asList(24,1002)
        ))); // t
    }
}
